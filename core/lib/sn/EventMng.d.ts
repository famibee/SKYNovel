import { IEvtMng } from './CmnLib';
import { HArg, IHTag, IVariable, IMain, IHEvt2Fnc } from './CmnInterface';
import { LayerMng } from './LayerMng';
import { ScriptIterator } from './ScriptIterator';
import { Container, Application } from 'pixi.js';
import { SoundMng } from './SoundMng';
import { Config } from './Config';
import { SysBase } from './SysBase';
export declare class EventMng implements IEvtMng {
    private readonly cfg;
    private readonly hTag;
    readonly appPixi: Application;
    private readonly main;
    private readonly layMng;
    private readonly val;
    private readonly sndMng;
    private readonly scrItr;
    readonly sys: SysBase;
    private readonly elc;
    private readonly hint;
    private readonly zxHint;
    private readonly zyHint;
    private readonly gamepad;
    private readonly fcs;
    constructor(cfg: Config, hTag: IHTag, appPixi: Application, main: IMain, layMng: LayerMng, val: IVariable, sndMng: SoundMng, scrItr: ScriptIterator, sys: SysBase);
    resvFlameEvent(win: Window): void;
    private resvFlameEvent4Wheel;
    private ev_keydown;
    private ev_contextmenu;
    private ev_wheel;
    private wheeling;
    private extend_wheel;
    private ev_wheel_waitstop;
    destroy(): void;
    private hLocalEvt2Fnc;
    private hGlobalEvt2Fnc;
    private isDbgBreak;
    fire(KEY: string, e: Event): void;
    private isWait;
    private getEvt2Fnc;
    popLocalEvts(): IHEvt2Fnc;
    pushLocalEvts(h: IHEvt2Fnc): void;
    waitEvent(onFinish: () => void, canskip?: boolean, global?: boolean): boolean;
    private waitEventBase;
    private firstWait;
    button(hArg: HArg, em: Container, normal: () => void, hover: () => boolean, clicked: () => void): void;
    private dispHint;
    waitLimitedEvent(hArg: HArg, onFinish: () => void): boolean;
    private procWheel4wle;
    private elcWLE;
    private clear_event;
    private clear_eventer;
    private event;
    private canFocus;
    private getHtmlElmList;
    private goTxt;
    private l;
    private p;
    private fncCancelSkip;
    private set_cancel_skip;
    private unregisterClickEvts;
    protected set_focus(hArg: HArg): boolean;
    private wait;
    private waitclick;
    isSkipKeyDown(): boolean;
    private readonly hDownKeys;
}
//# sourceMappingURL=EventMng.d.ts.map