import { Layer } from './Layer';
import { IEvtMng } from './CmnLib';
import { IVariable, IHTag, HArg, IMain } from './CmnInterface';
import { IInfTxLay } from './TxtStage';
import { Config } from './Config';
export declare class TxtLayer extends Layer {
    private static cfg;
    private static val;
    private static glbStyle;
    private static recText;
    static init(cfg: Config, hTag: IHTag, val: IVariable, recText: (txt: string) => void): void;
    private static main;
    private static evtMng;
    static setEvtMng(main: IMain, evtMng: IEvtMng): void;
    private static doAutoWc;
    private static hAutoWc;
    private static autowc;
    private infTL;
    private b_color;
    private b_alpha;
    private b_alpha_isfixed;
    private b_do;
    private b_pic;
    private cntInsidePadding;
    private txs;
    private rbSpl;
    private cntBtn;
    constructor();
    destroy(): void;
    static addStyle(text: string): void;
    lay(hArg: HArg): boolean;
    private drawBack;
    chgBackAlpha(g_alpha: number): void;
    tagCh(text: string): void;
    private putCh;
    private firstCh;
    private aSpan;
    private aSpan_bk;
    private autoCloseSpan;
    readonly click: () => boolean;
    private log;
    private recText;
    clearText(): void;
    get enabled(): boolean;
    set enabled(v: boolean);
    addButton(hArg: HArg): boolean;
    clearLay(hArg: HArg): void;
    readonly record: () => {
        name: string;
        idx: number;
        alpha: number;
        blendMode: number;
        rotation: number;
        scale_x: number;
        scale_y: number;
        pivot_x: number;
        pivot_y: number;
        x: number;
        y: number;
        visible: boolean;
    } & {
        enabled: boolean;
        b_do: string | null;
        b_pic: string;
        b_color: number;
        b_alpha: number;
        b_alpha_isfixed: boolean;
        txs: {
            infTL: IInfTxLay;
            cssText: string;
            ch_filter: any[] | null;
            lh_half: number;
            fi_easing: string;
            fo: {
                alpha: number;
                x: string;
            };
            fo_easing: string;
            ch_anime_time_ä»®: number;
            xz4htm2rect: number;
        };
        btns: string[];
    };
    playback(hLay: any, fncComp?: undefined | {
        (): void;
    }): boolean;
    dump(): string;
}
