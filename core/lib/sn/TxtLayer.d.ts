import { Layer } from './Layer';
import { IEvtMng } from './CmnLib';
import { IVariable, IHTag, HArg, IMain } from './CmnInterface';
import { Config } from './Config';
import { IMakeDesignCast } from './LayerMng';
import { Renderer } from 'pixi.js';
export declare class TxtLayer extends Layer {
    #private;
    static init(cfg: Config, hTag: IHTag, val: IVariable, recText: (txt: string) => void, isPageFore: (me: TxtLayer) => boolean): void;
    static setEvtMng(main: IMain, evtMng: IEvtMng): void;
    constructor();
    destroy(): void;
    set name(nm: string);
    get name(): string;
    cvsResize(): void;
    cvsResizeChildren(): void;
    lay(hArg: HArg): boolean;
    get width(): number;
    get height(): number;
    chgBackAlpha(g_alpha: number): void;
    static chgDoRec(doRec: boolean): void;
    static rec: (tx: string) => string;
    isCur: boolean;
    private mkStyle_r_align;
    tagCh(text: string): void;
    readonly click: () => boolean;
    clearText(): void;
    get pageText(): string;
    get enabled(): boolean;
    set enabled(e: boolean);
    readonly addButton: (hArg: HArg) => Promise<void>;
    canFocus(): boolean;
    clearLay(hArg: HArg): void;
    readonly record: () => any;
    playback(hLay: any, aPrm: Promise<void>[]): void;
    snapshot(rnd: Renderer, re: () => void): void;
    snapshot_end(): void;
    makeDesignCast(gdc: IMakeDesignCast): void;
    makeDesignCastChildren(gdc: IMakeDesignCast): void;
    showDesignCast(): void;
    showDesignCastChildren(): void;
    dump(): string;
}
//# sourceMappingURL=TxtLayer.d.ts.map