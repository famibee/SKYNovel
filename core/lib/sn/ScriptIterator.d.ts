import { IHTag, IMain, IVariable } from './CmnInterface';
import { Config } from './Config';
import { ICallStackArg } from './CallStack';
import { AnalyzeTagArg } from './AnalyzeTagArg';
import { IParse } from './PropParser';
import { EventMng } from './EventMng';
import { LayerMng } from './LayerMng';
import { SoundMng } from './SoundMng';
export declare class ScriptIterator {
    private cfg;
    private hTag;
    private main;
    private val;
    private alzTagArg;
    private runAnalyze;
    private parse;
    private sndMng;
    private script;
    private scriptFn_;
    readonly scriptFn: string;
    private idxToken_;
    readonly idxToken: number;
    subIdxToken(): void;
    private lineNum_;
    readonly lineNum: number;
    addLineNum: (len: number) => void;
    readonly now_token: string;
    private aCallStk;
    readonly isEmptyCallStk: boolean;
    readonly lenCallStk: number;
    readonly lastHArg: any;
    getCallStk: (idx: number) => ICallStackArg | null;
    private csAnalyBf;
    constructor(cfg: Config, hTag: IHTag, main: IMain, val: IVariable, alzTagArg: AnalyzeTagArg, runAnalyze: () => void, parse: IParse, sndMng: SoundMng);
    private evtMng;
    private layMng;
    setOtherObj(evtMng: EventMng, layMng: LayerMng): void;
    private let_ml;
    private dump_stack;
    private getScr2lineCol;
    private dump_script;
    private fncSet;
    private fncBreak;
    private fnLastBreak;
    private hScrCache4Dump;
    noticeBreak: (_set: boolean) => void;
    private dumpErrLine;
    dumpErrForeLine(): void;
    private aIfStk;
    private endif;
    private if;
    private call;
    private jump;
    private pop_stack;
    private return;
    private skipLabel;
    private jumpWork;
    private onlyCodeScript;
    private analyzeInit;
    private REG_NONAME_LABEL;
    private REG_LABEL_ESC;
    private REG_TOKEN_MACRO_BEGIN;
    private REG_TOKEN_MACRO_END;
    private seekScript;
    private hScript;
    private REG_TAG_LET_ML;
    private REG_TAG_ENDLET_ML;
    private resolveScript;
    private jump_light;
    private REG_WILDCARD;
    private REG_WILDCARD2;
    private replaceScript_Wildcard;
    private hC2M;
    private replaceScriptChar2macro_And_let_ml;
    private regC2M;
    private fncReserveToken;
    runAnalyzeSub(): string;
    private recordKidoku;
    private isKidoku_;
    readonly isKidoku: boolean;
    private eraseKidoku;
    readonly isNextKidoku: boolean;
    private pushCallStack;
    readonly normalWait: number;
    private bracket2macro;
    private REG_CANTC2M;
    private regStrC2M;
    private regStrC2M4not;
    private break_macro;
    private char2macro;
    private macro;
    private hTagInf;
    private load;
    private loadFromMark;
    private reload_script;
    private reload_script_FromMark;
    private mark;
    private record_place;
    private save;
}
