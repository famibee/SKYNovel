import { IConfig } from './ConfigBase';
export type HArg = {
    ':タグ名'?: string;
    canskip?: boolean;
    layer?: string;
    class?: string;
    index?: number;
    dive?: string;
    page?: string;
    alpha?: number;
    pivot_x?: number;
    pivot_y?: number;
    rotation?: number;
    scale_x?: number;
    scale_y?: number;
    visible?: boolean;
    blendmode?: string;
    left?: number;
    top?: number;
    width?: number;
    height?: number;
    pl?: number;
    pr?: number;
    pt?: number;
    pb?: number;
    rotate?: number;
    in_style?: string;
    out_style?: string;
    ffs?: string;
    noffs?: string;
    kinsoku_sol?: string;
    kinsoku_eol?: string;
    kinsoku_dns?: string;
    kinsoku_bura?: string;
    bura?: boolean;
    break_fixed?: boolean;
    break_fixed_left?: number;
    break_fixed_top?: number;
    time?: number;
    rule?: string;
    glsl?: string;
    render?: boolean;
    pos?: string;
    text?: string;
    wait?: number;
    record?: boolean;
    pic?: string;
    enabled?: boolean;
    hint?: string;
    hint_style?: string;
    hint_opt?: string;
    clickse?: string;
    enterse?: string;
    leavese?: string;
    clicksebuf?: string;
    entersebuf?: string;
    leavesebuf?: string;
    onenter?: string;
    onleave?: string;
    t?: string;
    r?: string;
    exp?: string;
    char?: string;
    sesame?: string;
    cast?: string;
    val?: string;
    flags?: string;
    reg?: string;
    len?: string;
    url?: string;
    format?: string;
    chain?: string;
    path?: string;
    fn?: string;
    face?: string;
    label?: string;
    call?: boolean;
    global?: boolean;
    name?: string;
    clear_local_event?: boolean;
    style?: string;
    style_hover?: string;
    style_clicked?: string;
    r_style?: string;
    r_style_hover?: string;
    r_style_clicked?: string;
    r_align?: string;
    b_width?: string;
    b_height?: string;
    b_color?: string;
    b_alpha?: number;
    b_alpha_isfixed?: boolean;
    b_pic?: string;
    back_clear?: string;
    max_col?: string;
    max_row?: string;
    bura_col?: string;
    chk_overrow?: string;
    dx?: number;
    dy?: number;
    key?: string;
    type?: string;
    camera_target?: string;
    arg?: HArg;
    fnc?: () => void;
    filter?: string;
    matrix?: string;
    clear_filter?: boolean;
    enable_filter?: boolean;
    ease?: string;
    centering?: boolean;
    x?: number | string;
    y?: number | string;
    id?: string;
    src?: string;
    var_name?: string;
    set_fnc?: string;
    break_fnc?: string;
    from?: number;
    to?: number | string;
    place?: number;
    add?: string;
    del?: string;
    buf?: string;
    buf2?: string;
    loop?: boolean;
    volume?: number;
    ret_ms?: number;
    end_ms?: number;
    join?: boolean;
    do_rec?: boolean;
    pan?: number;
    stop?: boolean;
    clear?: boolean;
    ':id_dc'?: string;
    ':id_tag'?: string;
    ':path'?: string;
    ':ln'?: number;
    ':col_s'?: number;
    ':col_e'?: number;
    ':idx_tkn'?: number;
    ':token'?: string;
    ':redraw'?: boolean;
    design_unit?: boolean;
};
export type ITag = (hArg: HArg) => boolean;
export type IHTag = {
    clearsysvar: ITag;
    clearvar: ITag;
    let_abs: ITag;
    let_char_at: ITag;
    let_index_of: ITag;
    let_length: ITag;
    let_ml: ITag;
    let_replace: ITag;
    let_round: ITag;
    let_search: ITag;
    let_substr: ITag;
    let: ITag;
    add_lay: ITag;
    clear_lay: ITag;
    finish_trans: ITag;
    lay: ITag;
    trans: ITag;
    wt: ITag;
    add_filter: ITag;
    clear_filter: ITag;
    enable_filter: ITag;
    pause_tsy: ITag;
    resume_tsy: ITag;
    stop_tsy: ITag;
    tsy: ITag;
    wait_tsy: ITag;
    autowc: ITag;
    ch: ITag;
    ch_in_style: ITag;
    ch_out_style: ITag;
    clear_text: ITag;
    current: ITag;
    endlet_ml: ITag;
    endlink: ITag;
    er: ITag;
    graph: ITag;
    link: ITag;
    r: ITag;
    rec_ch: ITag;
    rec_r: ITag;
    reset_rec: ITag;
    ruby2: ITag;
    set_focus: ITag;
    span: ITag;
    tcy: ITag;
    add_face: ITag;
    wv: ITag;
    add_frame: ITag;
    frame: ITag;
    let_frame: ITag;
    set_frame: ITag;
    tsy_frame: ITag;
    clear_event: ITag;
    enable_event: ITag;
    event: ITag;
    l: ITag;
    p: ITag;
    s: ITag;
    set_cancel_skip: ITag;
    wait: ITag;
    waitclick: ITag;
    fadebgm: ITag;
    fadeoutbgm: ITag;
    fadeoutse: ITag;
    fadese: ITag;
    playbgm: ITag;
    playse: ITag;
    stop_allse: ITag;
    stopbgm: ITag;
    stopfadese: ITag;
    stopse: ITag;
    volume: ITag;
    wb: ITag;
    wf: ITag;
    wl: ITag;
    ws: ITag;
    xchgbuf: ITag;
    else: ITag;
    elsif: ITag;
    endif: ITag;
    if: ITag;
    button: ITag;
    call: ITag;
    jump: ITag;
    page: ITag;
    pop_stack: ITag;
    return: ITag;
    bracket2macro: ITag;
    char2macro: ITag;
    endmacro: ITag;
    macro: ITag;
    copybookmark: ITag;
    erasebookmark: ITag;
    load: ITag;
    record_place: ITag;
    reload_script: ITag;
    save: ITag;
    quake: ITag;
    stop_quake: ITag;
    wq: ITag;
    close: ITag;
    export: ITag;
    import: ITag;
    loadplugin: ITag;
    navigate_to: ITag;
    snapshot: ITag;
    title: ITag;
    toggle_full_screen: ITag;
    update_check: ITag;
    window: ITag;
    dump_lay: ITag;
    dump_script: ITag;
    dump_stack: ITag;
    dump_val: ITag;
    log: ITag;
    trace: ITag;
};
export type Script = {
    aToken: string[];
    len: number;
    aLNum: number[];
};
export declare const REG_TAG: RegExp;
export declare function tagToken2Name_Args(token: string): [name: string, args: string];
export declare function tagToken2Name(token: string): string;
export declare function splitAmpersand(token: string): {
    name: string;
    text: string;
    cast: string | undefined;
};
export declare class Grammar {
    #private;
    private readonly cfg;
    constructor(cfg: IConfig);
    setEscape(ce: string): void;
    bracket2macro(hArg: HArg, hTag: IHTag, scr: Script, start_idx: number): void;
    char2macro(hArg: HArg, hTag: IHTag, scr: Script, start_idx: number): void;
    addC2M(a: string, b: string): void;
    resolveScript(txt: string): Script;
    testTagLetml(tkn: string): boolean;
    testTagEndLetml(tkn: string): boolean;
    testNoTxt(ch: string): boolean;
}
//# sourceMappingURL=Grammar.d.ts.map