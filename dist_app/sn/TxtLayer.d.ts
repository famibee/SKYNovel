import { Layer, T_RecordPlayBack_lay } from './Layer';
import { IEvtMng } from './CmnLib';
import { IHTag, HArg } from './Grammar';
import { IVariable } from './CmnInterface';
import { T_RP_layTxtStage } from './TxtStage';
import { Config } from './Config';
import { IMakeDesignCast } from './LayerMng';
import { SysBase } from './SysBase';
import { ScriptIterator } from './ScriptIterator';
import { T_LOG } from './Log';
import { Renderer, Application } from 'pixi.js';
export type T_RP_layTxt = T_RecordPlayBack_lay & {
    enabled: boolean;
    r_cssText: string;
    r_align: string;
    txs: T_RP_layTxtStage;
    b_alpha: number;
    b_alpha_isfixed: boolean;
    b_do: string;
    b_pic: string;
    b_color: string;
    btns: string[];
};
export type T_cmdTxt_JSON = {
    id?: string;
    ':link'?: string;
    text?: string;
    wait?: string;
    record?: boolean;
    pic?: string;
    fn?: string;
    label?: string;
    url?: string;
    style?: string;
    r_style?: string;
    style_hover: string;
    style_clicked: string;
    r_align?: string;
    t?: string;
    r?: string;
    in_style?: string;
    out_style?: string;
    delay?: number;
};
export declare class TxtLayer extends Layer {
    #private;
    static init(cfg: Config, hTag: IHTag, val: IVariable, log: T_LOG, isPageFore: (me: TxtLayer) => boolean, appPixi: Application): void;
    static setEvtMng(evtMng: IEvtMng, sys: SysBase, scrItr: ScriptIterator): void;
    constructor();
    destroy(): void;
    static destroy(): void;
    set name(nm: string);
    get name(): string;
    cvsResize(): void;
    cvsResizeChildren(): void;
    protected procSetX(x: number): void;
    protected procSetY(y: number): void;
    lay(hArg: HArg): boolean;
    get width(): number;
    get height(): number;
    chgBackAlpha(g_alpha: number): void;
    static chgDoRec(doRec: boolean): void;
    isCur: boolean;
    tagCh(text: string): void;
    get needGoTxt(): boolean;
    readonly click: () => boolean;
    clearText(): void;
    get pageText(): string;
    get pagePlainText(): string;
    get enabled(): boolean;
    set enabled(e: boolean);
    readonly addButton: (hArg: HArg) => Promise<void>;
    canFocus(): boolean;
    clearLay(hArg: HArg): void;
    readonly record: () => {
        enabled: boolean;
        r_cssText: string;
        r_align: string;
        b_do: string | undefined;
        b_pic: string;
        b_color: number;
        b_alpha: number;
        b_alpha_isfixed: boolean;
        ffs: string;
        txs: {
            infTL: import('./TxtStage').T_InfTxLay;
            cssText: string;
            left: number;
            ch_filter: any[] | undefined;
            fi_easing: string;
            fo_easing: string;
            hyph: import('./Hyphenation').T_RP_Hyphenation;
        };
        strNoFFS: string;
        btns: string[];
        name: string;
        idx: number;
        alpha: number;
        blendMode: import('pixi.js').BLEND_MODES;
        rotation: number;
        scale_x: number;
        scale_y: number;
        pivot_x: number;
        pivot_y: number;
        x: number;
        y: number;
        visible: boolean;
        aFltHArg: HArg[];
    };
    playback(hLay: T_RP_layTxt, aPrm: Promise<void>[]): void;
    get cssText(): string;
    set cssText(ct: string);
    snapshot(rnd: Renderer, re: () => void): void;
    snapshot_end(): void;
    makeDesignCast(gdc: IMakeDesignCast): void;
    makeDesignCastChildren(gdc: IMakeDesignCast): void;
    showDesignCast(): void;
    showDesignCastChildren(): void;
    dump(): string;
}
//# sourceMappingURL=TxtLayer.d.ts.map