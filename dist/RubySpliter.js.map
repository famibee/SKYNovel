{"version":3,"file":"RubySpliter.js","sources":["../src/sn/RubySpliter.ts"],"sourcesContent":["/* ***** BEGIN LICENSE BLOCK *****\n\tCopyright (c) 2018-2025 Famibee (famibee.blog38.fc2.com)\n\n\tThis software is released under the MIT License.\n\thttp://opensource.org/licenses/mit-license.php\n** ***** END LICENSE BLOCK ***** */\n\nimport type {HArg} from './Grammar';\nimport type {IPutCh} from './CmnInterface';\n\nexport interface IAutoPage { (idx: number, str: string): void; }\n\nexport class RubySpliter {\n\tstatic\t#sesame\t\t= 'ヽ';\n\tstatic\tsetting(hArg: HArg) {if (hArg.sesame) RubySpliter.#sesame = hArg.sesame}\n\tstatic\tgetSesame() {return RubySpliter.#sesame}\n\n\tstatic\tdestroy() {RubySpliter.#sesame = 'ヽ'}\n\n\t#putCh\t: IPutCh\t= ()=> {};\n\tinit(putCh: IPutCh) {this.#putCh = putCh}\n\n/*\n\t\t★Unicodeで「漢字」の正規表現 – ものかの http://tama-san.com/kanji-regex/\n\t\t2E80..2FDF CJK部首補助＋康熙部首\n\t\t3005 々（漢字の踊り字）\n\t\t3007 〇（漢数字のゼロ）\n\t\t303B 〻（漢字の踊り字）\n\t\t3400..4DBF CJK統合漢字拡張A\n\t\t4E00..9FFF CJK統合漢字\n\t\tF900..FAFF CJK互換漢字\n\t\t20000..2FFFF CJK統合漢字拡張B〜F＋CJK互換漢字追加＋念のためU+2FFFFまで\n\n\t\t[\\x{2E80}-\\x{2FDF}々〇〻\\x{3400}-\\x{4DBF}\\x{4E00}-\\x{9FFF}\\x{F900}-\\x{FAFF}\\x{20000}-\\x{2FFFF}]\n\t\t[\\u2E80-\\u2FDF々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF\\u20000-\\u2FFFF]\n\t\t[⺀-⿟々〇〻㐀-䶿一-鿿豈-﫿\\u20000-\\u2FFFF]\t\t// 含まれない文字がある\n\t\t[⺀-⿟々〇〻㐀-鿿豈-﫿\\u20000-\\u2FFFF]\t\t\t// ヽ--30FD が変に引っかかる。多分\\u2000-\\u2FFF解釈\n\t\t\\\\u{20000}-\\\\u{2FFFF}\t// 五桁だとエラー\n\n\t\t【2022/10/03】ruby正規表現のUnicode プロパティ(とPOSIX文字クラス) - Qiita https://qiita.com/Takayuki_Nakano/items/8d38beaddb84b488d683\n\t\t\t> このHiraganaプロパティ、長音記号は含まれていません。\n\t\t\t> \\p{Han}…簡体字や繁体字、韓国語の漢字…ベトナム語の漢字にもマッチ\n\t\t\n\t\t・Unicode文字一覧表 - instant tools https://tools.m-bsys.com/ex/unicode_table.php\n*/\n\tstatic\t#REG_RUBY\t: RegExp;\n\tstatic\tsetEscape(ce: string) {\n\t\t// 830 match 11293 step(1.7ms) PCRE2 https://regex101.com/r/BBrQtC/1\n\t\t/*\n(?<txt4>\\\\\\S)\n|\t｜(?<str>[^《\\n]+)《(?<ruby>[^》\\n]+)》\n|\t(?: (?<kan>[⺀-⿟々〇〻㐀-鿿豈-﫿]+ [ぁ-ヿ]* | [^　｜《》\\n])\n\t\t《(?<kan_ruby>[^》\\n]+)》)\n|\t(?<txt>\n\t[\\xD800-\\xDBFF][\\xDC00-\\xDFFF]\n|\t[^｜《》]+?\n|\t.)\n\t\t*/\n\t\tRubySpliter.#REG_RUBY = new RegExp(\n\t\t\t`${ce ?`(?<ce>\\\\${ce}\\\\S)|` :''}`+\n\t\t\t`｜(?<str>[^《\\\\n]+)《(?<ruby>[^》\\\\n]+)》`+\n\t\t\t`|(?:(?<kan>[⺀-⿟々〇〻㐀-鿿豈-﫿]+[ぁ-ヿ]*|[^　｜《》\\\\n])`+\n\t\t\t`《(?<kan_ruby>[^》\\\\n]+)》)`+\n\t\t\t`|(?<txt>`+\n\t\t\t`[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]`+\t// 上位 + 下位サロゲート\n\t\t\t`|[^｜《》]+?`+\t\t// 不要だが細切れにしないほうが後々効率で有利\n\t\t\t`|.)`,\n\t\t\t'gs'\n\t\t);\n\t}\n\n\tputTxt(text: string) {\n\t\tfor (const {groups} of text.matchAll(RubySpliter.#REG_RUBY)) {\n\t\t\tconst {ruby, kan_ruby, kan='', ce, txt='', str=''} = groups!;\n\t\t\tif (ruby) {this.putTxtRb(decodeURIComponent(str), ruby); continue}\n\n\t\t\tif (kan_ruby) {this.putTxtRb(kan, kan_ruby); continue}\n\t\t\tif (ce) {this.#putCh(ce.slice(1), ''); continue}\n\n\t\t\tfor (const v of Array.from(txt)) this.#putCh(v, '');\n\t\t\t\t// txt.split('')や [...txt] はサロゲートペアで問題\n\t\t}\n\t}\n\n\tputTxtRb(text: string, ruby: string) {\t// テスト用にpublic\n\t\t// 自動区切りを行わない（内部的 json文法）\n\t\tif (/^\\w+｜{\"/.test(ruby)) {this.#putCh(text, ruby); return}\n\n\t\tconst a: string[] = Array.from(text);\n\t\tconst len = a.length;\n\t\tif (/^\\*.?$/.test(ruby)) {\t// 傍点文法\n\t\t\tconst rb_ses = 'center｜'+ (ruby === '*' ?RubySpliter.#sesame :ruby.charAt(1));\n\t\t\tfor (let i=0; i<len; ++i) this.#putCh(a[i]!, rb_ses);\n\t\t\treturn;\n\t\t}\n\n\t\t// 自動区切りを行わない（単漢字など）\n\t\tif (len === 1 || ! ruby.includes(' ')) {\n\t\t\tthis.#putCh(text, decodeURIComponent(ruby));\n\t\t\treturn;\n\t\t}\n\n\t\t// 空白がある場合はユーザが区切りを指定しているものと見なす\n\t\tconst aR = ruby.split(' ');\n\t\tconst lenR = aR.length;\n\t\tconst len_max = (lenR > len) ?lenR :len;\n\t\tfor (let i=0; i<len_max; ++i) this.#putCh(\n\t\t\t(i < len) ? a[i]! : '',\n\t\t\t(i < lenR) ? decodeURIComponent(aR[i]!) : ''\n\t\t);\n\t}\n\n}\n"],"names":["RubySpliter","#sesame","hArg","#putCh","putCh","#REG_RUBY","ce","text","groups","ruby","kan_ruby","kan","txt","str","v","a","len","rb_ses","i","aR","lenR","len_max"],"mappings":"AAYO,MAAMA,EAAY;AAAA,EACxB,OAAOC,KAAW;AAAA,EAClB,OAAO,QAAQC,GAAY;AAAC,IAAIA,EAAK,WAAoBF,EAAAC,KAAUC,EAAK;AAAA,EAAA;AAAA,EACxE,OAAO,YAAY;AAAC,WAAOF,EAAYC;AAAA,EAAA;AAAA,EAEvC,OAAO,UAAU;AAAC,IAAAD,EAAYC,KAAU;AAAA,EAAA;AAAA,EAExCE,KAAkB,MAAK;AAAA,EAAC;AAAA,EACxB,KAAKC,GAAe;AAAC,SAAKD,KAASC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBnC,OAAOC;AAAA,EACP,OAAO,UAAUC,GAAY;AAY5B,IAAAN,EAAYK,KAAY,IAAI;AAAA,MAC3B,GAAGC,IAAI,WAAWA,CAAE,UAAS,EAAE;AAAA,MAQ/B;AAAA,IACD;AAAA,EAAA;AAAA,EAGD,OAAOC,GAAc;AACpB,eAAW,EAAC,QAAAC,OAAWD,EAAK,SAASP,EAAYK,EAAS,GAAG;AACtD,YAAA,EAAC,MAAAI,GAAM,UAAAC,GAAU,KAAAC,IAAI,IAAI,IAAAL,GAAI,KAAAM,IAAI,IAAI,KAAAC,IAAI,GAAM,IAAAL;AACrD,UAAIC,GAAM;AAAC,aAAK,SAAS,mBAAmBI,CAAG,GAAGJ,CAAI;AAAG;AAAA,MAAA;AAEzD,UAAIC,GAAU;AAAM,aAAA,SAASC,GAAKD,CAAQ;AAAG;AAAA,MAAA;AAC7C,UAAIJ,GAAI;AAAC,aAAKH,GAAOG,EAAG,MAAM,CAAC,GAAG,EAAE;AAAG;AAAA,MAAA;AAE5B,iBAAAQ,KAAK,MAAM,KAAKF,CAAG,EAAQ,MAAAT,GAAOW,GAAG,EAAE;AAAA,IAAA;AAAA,EAEnD;AAAA,EAGD,SAASP,GAAcE,GAAc;AAEhC,QAAA,UAAU,KAAKA,CAAI,GAAG;AAAM,WAAAN,GAAOI,GAAME,CAAI;AAAG;AAAA,IAAA;AAE9C,UAAAM,IAAc,MAAM,KAAKR,CAAI,GAC7BS,IAAMD,EAAE;AACV,QAAA,SAAS,KAAKN,CAAI,GAAG;AAClB,YAAAQ,IAAS,aAAYR,MAAS,MAAKT,EAAYC,KAASQ,EAAK,OAAO,CAAC;AAClE,eAAAS,IAAE,GAAGA,IAAEF,GAAK,EAAEE,EAAG,MAAKf,GAAOY,EAAEG,CAAC,GAAID,CAAM;AACnD;AAAA,IAAA;AAID,QAAID,MAAQ,KAAK,CAAEP,EAAK,SAAS,GAAG,GAAG;AACtC,WAAKN,GAAOI,GAAM,mBAAmBE,CAAI,CAAC;AAC1C;AAAA,IAAA;AAIK,UAAAU,IAAKV,EAAK,MAAM,GAAG,GACnBW,IAAOD,EAAG,QACVE,IAAWD,IAAOJ,IAAMI,IAAMJ;AACpC,aAASE,IAAE,GAAGA,IAAEG,GAAS,EAAEH,EAAQ,MAAAf;AAAA,MACjCe,IAAIF,IAAOD,EAAEG,CAAC,IAAK;AAAA,MACnBA,IAAIE,IAAQ,mBAAmBD,EAAGD,CAAC,CAAE,IAAI;AAAA,IAC3C;AAAA,EAAA;AAGF;"}