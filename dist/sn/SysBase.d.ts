import { IHTag, ITag } from './Grammar';
import { IVariable, ISysBase, T_Data4Vari, ILayerFactory, IMain, IFire, IFncHook, T_SysBaseLoadedParams, HPlugin, T_H_TMP_DATA } from './CmnInterface';
import { EventListenerCtn } from './EventListenerCtn';
import { IConfig, IFn2Path, ISysRoots, HSysBaseArg } from './ConfigBase';
import { Application, Loader } from 'pixi.js';
export declare class SysBase implements ISysRoots, ISysBase {
    #private;
    readonly hPlg: HPlugin;
    arg: HSysBaseArg;
    hFactoryCls: {
        [name: string]: ILayerFactory;
    };
    protected readonly elc: EventListenerCtn;
    constructor(hPlg: HPlugin | undefined, arg: HSysBaseArg);
    protected loaded(...[hPlg,]: T_SysBaseLoadedParams): Promise<void | undefined>;
    fetch: (url: string, init?: RequestInit) => Promise<Response>;
    destroy(): void;
    resolution: number;
    protected cfg: IConfig;
    loadPath(_hPathFn2Exts: IFn2Path, cfg: IConfig): Promise<void>;
    protected readonly data: T_Data4Vari;
    initVal(_data: T_Data4Vari, _hTmp: T_H_TMP_DATA, _comp: (data: T_Data4Vari) => void): Promise<void>;
    flush(): void;
    protected flushSub(): void;
    use4ViteElectron(_src: string, _path: string, _ld: Loader, _main: IMain): boolean;
    protected run(): Promise<void>;
    protected val: IVariable;
    protected main: IMain;
    init(hTag: IHTag, appPixi: Application, val: IVariable, main: IMain): Promise<void>[];
    get cvsWidth(): number;
    get cvsHeight(): number;
    get cvsScale(): number;
    get ofsLeft4elm(): number;
    get ofsTop4elm(): number;
    get ofsPadLeft_Dom2PIXI(): number;
    get ofsPadTop_Dom2PIXI(): number;
    protected isFullScr: boolean;
    cvsResize(): void;
    attach_debug(main: IMain): void;
    protected extPort: number;
    end(): void;
    protected toast(nm: string): void;
    pathBaseCnvSnPath4Dbg: string;
    protected fire: IFire;
    setFire(fire: IFire): void;
    addHook(fnc: IFncHook): void;
    callHook: IFncHook;
    send2Dbg: IFncHook;
    copyBMFolder: (_from: number, _to: number) => void;
    eraseBMFolder: (_place: number) => void;
    protected readonly close: ITag;
    protected readonly _export: ITag;
    protected readonly _import: ITag;
    protected readonly navigate_to: ITag;
    protected readonly title: ITag;
    protected titleSub(_txt: string): void;
    static tglFlscr_HdrErr(e: unknown): void;
    static modKey(e: KeyboardEvent): string;
    protected tglFlscr_sub(): Promise<void>;
    protected readonly update_check: ITag;
    protected readonly window: ITag;
    setTitleInfo(txt: string): void;
    dec: (_ext: string, tx: string) => Promise<string>;
    decAB(iab: ArrayBuffer): Promise<HTMLImageElement | HTMLVideoElement | ArrayBuffer>;
    protected enc: (tx: string) => Promise<string>;
    protected stk: () => string;
    hash: (_str: string) => string;
    readonly isApp: boolean;
    protected $path_downloads: string;
    get path_downloads(): string;
    protected $path_userdata: string;
    get path_userdata(): string;
    capturePage(_path: string, _w: number, _h: number, _fnc: () => void): void;
    savePic(_path: string, _data_url: string): Promise<void>;
    ensureFile(_path: string): Promise<void>;
    appendFile(_path: string, _data: string): Promise<void>;
    outputFile(_path: string, _data: string): Promise<void>;
}
//# sourceMappingURL=SysBase.d.ts.map